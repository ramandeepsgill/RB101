# 01. A method that returns the sum of two integers

- Ask the user to input the first integer.
- Ask the user to input the second integer.
- Add the 2 integers.
- Return the sum of teh 2 integers.

# More formal pseudo-code

START

GET first integer
SET number_1 = first integer.
GET second integer
SET number_2 = second integer.
SET sum = number_1 + number_2
PRINT sum

END


# 02. a method that takes an array of strings, and returns a string that is all
# those strings concatenated together

Given an array of strings ['str1', 'str2' ... ]
final string = 'str1' + 'str2' + 'str3' ...
return final string

# more formal pseudo-code
START

# Given an array of strings

iterator = 0

SET final_string = ''

WHILE itearator < size of the given array_of_strings
  final_string = final_string + given_array_of_strings[iterator]
  iterator = iterator + 1
END

PRINT final_string

END

# 03. a method that takes an array of integers, and returns a new array with every 
# other element from the original array, starting with the first element. 
# For instance:

# everyOther([1,4,7,2,5]) # => [1,7,5]

-Given an array of integers
-Create an empty resulting array
-set the iterator to 0 and iterate through the given array of integers
-add the given array of integers at iterator index to the resulting array
-increment the iterator by 2
-Print the resulting array

# more formal pseudo-code

START

# given an array of integers

SET resulting_array = []
SET iterator = 0

WHILE iterator < size of given array of integers
  resulting_array[iterator] = given_array[iterator]
  iterator = iterator + 2
END

PRINT resulting_array

END

# 04. a method that determines the index of the 3rd occurrence of a given character 
# in a string. For instance, if the given character is 'x' and the string is 
# 'axbxcdxex', the method should return 6 (the index of the 3rd 'x'). 
# If the given character does not occur at least 3 times, return nil.

Given a string
Given a character which needs to be found in the string
Split the strings into an array of single characters
Initialize a counter
Initialize a variable called index
Iterate through the array
- check if the given character is in the array
- for every instance of the character found in the array, increment the 
counter by 1, and store the index at which the character is found in the
variable index
- if the counter reaches 3, break out of the loop and return the value of index
- if the counter is less than 3 after iterating through the array, return nil

# more formal pseudo-code

START

# Given a string
# Given a character which needs to be found in the string

SET array_chars = split the given string into an array
SET char_to_check = given character

SET counter = 0
SET index = nil
SET iterator = 0

WHILE iterator < length of array_chars
  set current_char = value within array_chars at space 'iterator'
  IF char_to_check == current_char
    index = iterator
    counter = counter + 1
  END
  IF counter == 3
   BREAK
  END
  
  iterator = iterator + 1
END

IF counter == 3
  PRINT the value of index
ELSE
  PRINT nil
END

END

# 05. a method that takes two arrays of numbers and returns the result of merging the
# arrays. The elements of the first array should become the elements at the even 
# indexes of the returned array, while the elements of the second array should 
# become the elements at the odd indexes. For instance:

# merge([1, 2, 3], [4, 5, 6]) # => [1, 4, 2, 5, 3, 6]

# You may assume that both array arguments have the same number of elements.

Given 2 arrays of the same size

Find the size of each array (it should be the same)

Double this number (the size of the array) and store it in variable iterator.
This will be the number of times we will loop through

Initialize an empty new array which will be the merged array of the 2 given
arrays.

Intialize an array_1_index to 0
Intialize an array_2_index to 0

Run a loop iterator number of times

if the value of iterator is odd, add the element from array_1 to the new array
  and increment the array_1_index by 1
  
if the value of iterator is even, add the element from array_2 to the new array
  and increment the array_2_index by 1
  
After completing the loop, print the new array

# more formal pseudo-code

START

# Given 2 arrays of the same size

SET number_of_iterations = 2 * size of any given array

SET new_array = []

SET array_1_index = 0
SET array_2_index = 0

SET iterator = 0

WHILE iterator < number_of_iterations
  IF iterator is even
    new_array[iterator] = array_1[array_1_index]
    array_1_index = array_1_index + 1
  ELSE
    new_array(iterator) = array_2[array_2_index]
    array_2_index = array_2_index + 1
  END

  iterator = iterator + 1
END

PRINT new_array

END
   
  





  



